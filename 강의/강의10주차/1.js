// 계단오르기
// 철수는 계단을 한 계단 or 두 계단씩 올라간다.
// 만약 총 4계단을 오르는 방법의 수는 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, 2+2
// 총 다섯가지이다.
// 그렇다면 총 N계단일 때 올라가는 방법의 수
// dynamic programming : 문제를 쪼개서 쪼갠 문제의 해답을 찾고 
// 그 다음 문제를 그 전에 해답과 다음문제를 연관지어 문제를 푼다(점화식)
// 우선 1번 계단에 올 수있는 방법은 한 가지다
// 2번 계단에 올 수 있는 방법은 두 가지다. (1, 2)
// 3번 계단에 올 수 있는 방법은 1번계단에서 오던가 2번 계단에서 오던가
// 그러면 1번계단에서 올 수 있는방법은 한 가지, 2번 계단에서 올 수 있는 방법은 두 가지
// 합해서 3가지 이다.
// 4번 계단에 올 수 있는 방법은 2번 계단에서 오거나 3번계단에서 오거나 이다.
// 2번계단에서 오는 방법은 2가지, 3번 계단에서 오는 방법은 3가지이다.
// 더하면 5가지
// 5번 계단에 올 수 있는 방법은 3번계단, 4번계단에서 오는 것
// 3번 계단은 3가지 4번 계단은 5가지 = 8가지
// 이렇게 점화식을 만들어낼 수 있다.
function solution(n) {
    let answer = 0;
    let dy = Array.from({length: n+1}, () => 0)
    dy[1] = 1;
    dy[2] = 2;
    for(let i = 3; i <= n; i++) {
        dy[i] = dy[i-2] + dy[i - 1]
    }
    answer = dy[n]
    return answer;
}

console.log(solution(7))